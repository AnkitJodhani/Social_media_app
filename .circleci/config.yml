version: 2.1

jobs:
  package:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Building and packaging application
          command: |
            touch ./Backend/.env
            echo "CLOUD_API_KEY="$CLOUD_API_KEY >> ./Backend/.env
            echo "CLOUD_API_SECRET="$CLOUD_API_SECRET >> ./Backend/.env
            echo "CLOUD_NAME="$CLOUD_NAME >> ./Backend/.env
            echo "JWT_LIFETIME="$JWT_LIFETIME >> ./Backend/.env
            echo "JWT_SECRET="$JWT_SECRET >> ./Backend/.env
            echo "MONGO_URI="$MONGO_URI >> ./Backend/.env
            echo "MODE="$MODE >> ./Backend/.env
            echo "PORT="$PORT >> ./Backend/.env
            cat ./Backend/.env
            docker build -t $DC_USERNAME/backend:latest ./Backend/
            docker build -t $DC_USERNAME/frontend:latest ./Frontend/
            docker login -u $DC_USERNAME -p $DC_PASS
            docker images
            docker push $DC_USERNAME/backend:latest
            docker push $DC_USERNAME/frontend:latest
    
  # deploy:
  #   docker:
  #     - image: cimg/aws:2023.04.1
  #   steps:
  #     - checkout
  #     - run:
  #         name: Lets deploy thsi application
  #         command: |
  #           aws --version
  #           APP_VERSION=$(echo $(date +%s))
  #           # envsubst < templates/Dockerrun.aws.json > Dockerrun.aws.json
  #           aws s3 cp ./templates/Dockerrun.aws.json s3://$AWS_S3_BUCKET/Dockerrun.aws.json
  #           aws elasticbeanstalk create-application-version --application-name $APP_NAME --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=Dockerrun.aws.json
  #           aws elasticbeanstalk update-environment --application-name $APP_NAME --version-label $APP_VERSION --environment-name $APP_ENV_NAME
  #           aws elasticbeanstalk wait environment-updated --application-name $APP_NAME --version-label $APP_VERSION --environment-name $APP_ENV_NAME

  deploy:
    docker:
      - image: cimg/base:2023.04
    steps:
      - checkout
      - run:
          name: Lets deploy thsi application
          command: |
            touch key.txt
            touch sc_key.pem
            echo $KEY >> key.txt
            cat key.txt > sc_key.pem
            chmod 400 sc_key.pem
            cat sc_key.pem
            scp -o StrictHostKeyChecking=no -i sc_key.pem ./docker-compose.yml ubuntu@$DEV_SERVER_IP:/home/ubuntu 
            ssh -o StrictHostKeyChecking=no -i sc_key.pem ubuntu@$DEV_SERVER_IP
            docker login -u $DC_USERNAME -p $DC_PASS
            docker-compose down
            docker-compose up -d
            docker ps 



workflows:
  testing:
    jobs:
      # - package
      - deploy
          # requires:
            # - package

  